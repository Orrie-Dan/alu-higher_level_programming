import unittest
from matrix_divided import matrix_divided

class TestMatrixDivided(unittest.TestCase):

    def test_matrix_divided(self):
        # Test case 1: Valid matrix with integer division
        matrix = [
            [10, 20, 30],
            [40, 50, 60]
        ]
        div = 10
        result = matrix_divided(matrix, div)
        self.assertEqual(result, [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])

        # Test case 2: Valid matrix with float division
        matrix = [
            [1.5, 2.5, 3.5],
            [4.5, 5.5, 6.5]
        ]
        div = 2.0
        result = matrix_divided(matrix, div)
        self.assertEqual(result, [[0.75, 1.25, 1.75], [2.25, 2.75, 3.25]])

        # Test case 3: Division by a non-zero number (float)
        matrix = [
            [10, 20, 30],
            [40, 50, 60]
        ]
        div = 5
        result = matrix_divided(matrix, div)
        self.assertEqual(result, [[2.0, 4.0, 6.0], [8.0, 10.0, 12.0]])

        # Test case 4: Matrix with mixed integer and float elements
        matrix = [
            [1, 2.5, 3],
            [4.5, 5, 6]
        ]
        div = 2
        result = matrix_divided(matrix, div)
        self.assertEqual(result, [[0.5, 1.25, 1.5], [2.25, 2.5, 3.0]])

        # Test case 5: Invalid matrix input (not a list of lists)
        matrix = "invalid matrix"
        div = 2
        with self.assertRaises(TypeError):
            matrix_divided(matrix, div)

        # Test case 6: Matrix with rows of different lengths
        matrix = [
            [1, 2],
            [3, 4, 5]
        ]
        div = 2
        with self.assertRaises(TypeError):
            matrix_divided(matrix, div)

        # Test case 7: Divisor is zero
        matrix = [
            [10, 20],
            [30, 40]
        ]
        div = 0
        with self.assertRaises(ZeroDivisionError):
            matrix_divided(matrix, div)

        # Test case 8: Invalid divisor (not a number)
        matrix = [
            [10, 20],
            [30, 40]
        ]
        div = "string"
        with self.assertRaises(TypeError):
            matrix_divided(matrix, div)

        # Test case 9: Matrix with a single element
        matrix = [
            [10]
        ]
        div = 2
        result = matrix_divided(matrix, div)
        self.assertEqual(result, [[5.0]])

        # Test case 10: Matrix with negative numbers
        matrix = [
            [-10, -20],
            [-30, -40]
        ]
        div = 10
        result = matrix_divided(matrix, div)
        self.assertEqual(result, [[-1.0, -2.0], [-3.0, -4.0]])

if __name__ == "__main__":
    unittest.main()

